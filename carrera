#!/usr/bin/env bash

## Set up colors
red=$(tput setaf 1)
green=$(tput setaf 2)
orange=$(tput setaf 3)
reset=$(tput sgr0)

## Terminal Editors
TERMINAL_EDITORS=("vim" "vi" "nano" "pico" "ed" "emacs" "nvim")

## Init functions
showhelp()
{
    echo "
____________ ________________________________ _
_  ___/  __ \`/_  ___/_  ___/  _ \_  ___/  __ \`/
/ /__ / /_/ /_  /   _  /   /  __/  /   / /_/ /
\___/ \__,_/ /_/    /_/    \___//_/    \__,_/

Turbo-charged ${green}symfony new${reset}! Rapid application creation for new Symfony projects.

${orange}Usage:
${reset}  carrera [project name] [arguments]

${orange}Options:
${green}  -h, --help${reset}                  Show brief help
${green}  -e, --editor EDITOR${reset}         Specify an editor to run '${green}EDITOR .${reset}' with after
${green}  -m, --message \"message\"${reset}     Customize the initial commit message
${green}  -p, --path PATH${reset}             Customize the path in which the new project will be created
${green}  -d, --dev${reset}                   Create a new project based on the development version of Symfony's master branch
${green}  -db,--database DB_URL${reset}       Specify the database url
${green}  -c, --dbcreate${reset}              Create the database if a database url is provided
${green}  -w, --webpack${reset}               Install Symfony Encore

${orange}Available commands:
${green}  config:make${reset}                 Generate a config file
${green}  config:edit${reset}                 Edit existing config file

${green}  after:make${reset}                  Generate an after file
${green}  after:edit${reset}                  Edit existing after file
    "
    quit
}

isterminaleditor ()
{
    for EDITOR in $TERMINAL_EDITORS; do [[ "$EDITOR" == "$CODEEDITOR" ]] && return 0; done
    return 1
}

editconfig()
{
    if [[ ! -f ~/.carrera/config ]]; then
        echo "Config does not exist; creating."

        makeconfig
        return
    fi

    edit ~/.carrera/config
}

makeconfig()
{
    if [[ -f ~/.carrera/config ]]; then
        echo "Config already exists."
        quit
    fi

    if [[ ! -d ~/.carrera ]]; then
      mkdir ~/.carrera
    fi

    echo '#!/usr/bin/env bash
PROJECTPATH="."
MESSAGE="Initial commit"
DEVELOP=false
CODEEDITOR=""
DB_URL=""
DB_CREATE=false
ENCORE=false' > ~/.carrera/config

    edit ~/.carrera/config
}

editafter()
{
    if [[ ! -f ~/.carrera/after ]]; then
        echo "after file does not exist; creating."

        makeafter
        return
    fi

    edit ~/.carrera/after
}

makeafter()
{
    if [[ -f ~/.carrera/after ]]; then
        echo "after file already exists."
        quit
    fi

    if [[ ! -d ~/.carrera ]]; then
      mkdir ~/.carrera
    fi

    echo '#!/usr/bin/env bash
# Install additional composer dependencies as you would from the command line.
# echo "
# Installing Composer Dependencies
# "
# composer require orm
# To copy standard files to new carrera project place them in ~/.carrera/includes directory.
# echo "
# Copying Include Files
# "
# cp -R ~/.carrera/includes/ $PROJECTPATH
# To add a git commit after given modifications
# echo "
# Committing after modifications to Git
# "
# git add .
# git commit -am "Initialize Composer dependencies and additional files."
' > ~/.carrera/after

    edit ~/.carrera/after
}

edit()
{
    ## Open with best editor
    if [[ $CODEEDITOR ]]; then
        $CODEEDITOR $1
    elif [[ $EDITOR ]]; then
        $EDITOR $1
    else
        vim $1
    fi
}

abort()
{
    echo >&2 '
***********************************************
*** There was an error running this script. ***
***********************************************
'
    echo "An error occurred. Exiting..." >&2
    exit 1
}

quit()
{
    trap : 0
    exit 0
}



## Set up error handling
trap 'abort' 0

# Start script

PROJECTNAME=$1
PROJECTPATH="."
MESSAGE="Initial commit."
DEVELOP=false
CODEEDITOR=""
DB_URL=""
DB_CREATE=false
ENCORE=false

# Load config if it exists
if [[ -f ~/.carrera/config ]]; then
    source ~/.carrera/config
fi

# Check for project name argument; if none passed, show help
if [[ $# -eq 0 ]]; then
    showhelp
fi

# Check if user wants to set up a config file.
if [[ $1 == "config:make" ]]; then
    makeconfig
    quit
fi

if [[ $1 == "config:edit" ]]; then
    editconfig
    quit
fi

# Check if user wants to set up a after file.
if [[ $1 == "after:make" ]]; then
    makeafter
    quit
fi

if [[ $1 == "after:edit" ]]; then
    editafter
    quit
fi

# Handle arguments
while [[ $# -gt 0 ]]; do
    key="$1"

    case $key in
        -h|--help)
            showhelp
            ;;
        -p|--path)
            PROJECTPATH="$2"
            shift
            ;;
        -m|--message)
            MESSAGE="$2"
            shift
            ;;
        -e|--editor)
            CODEEDITOR="$2"
            shift
            ;;
        -d|--develop|--dev)
            DEVELOP=true
            ;;
        -db|--database)
            DB_URL="$2"
            shift
            ;;
        -c|--dbcreate)
            DB_CREATE=true
            ;;
        -w|--webpack|--encore)
            ENCORE=true
            ;;
        *)
            ;;
    esac

    shift
done

if [ -d "$PROJECTPATH/$PROJECTNAME" ]; then
  echo "${red}Project directory $PROJECTPATH/$PROJECTNAME already exists.${reset}"
  quit
fi

if ! hash php 2>/dev/null; then
  echo "${red}PHP is not installed.${reset}"
  quit
fi

if ! hash symfony 2>/dev/null; then
  echo "${red}Symfony CLI not installed.${reset}

For more information visit https://symfony.com/download."
  if [[ "$(uname)" == "Darwin" ]]; then
    echo "
To install it, run the command:

${green}  curl -sS https://get.symfony.com/cli/installer | bash${reset}
    "
  elif [[ "$(expr substr $(uname -s) 1 5)" == "Linux" ]]; then
    echo "
To install it, run the command:

${green}  wget https://get.symfony.com/cli/installer -O - | bash${reset}
    "
  fi

  quit
fi

if ! hash git 2>/dev/null; then
  echo "${red}Git not installed.${reset}"
  quit
fi

cd "$PROJECTPATH" || exit

echo "
****************************************************************************************************
3,2,1 … and we’re off! Creating your new Symfony app ${green}$PROJECTNAME${reset}. Go build something awesome!
****************************************************************************************************
"

if [[ "$DEVELOP" = true ]]; then
    symfony new --version=dev-master "$PROJECTNAME"
else
    symfony new --full "$PROJECTNAME"
fi

cd "$PROJECTNAME" || exit

#if [[ "$CODEEDITOR" != "" ]]; then
#    if ! isterminaleditor; then
#       $CODEEDITOR .
#   fi
#fi

cp .env .env.local

if [[ "$DB_URL" != "" ]]; then
    sed -i '' "s|mysql://db_user:db_password@127.0.0.1:3306/db_name|$DB_URL|" .env.local
    if [[ "$DB_CREATE" = true ]]; then
        echo "
* Creating a database for the project
  (running bin/console doctrine:database:create)
        "
        php bin/console doctrine:database:create
    fi
fi

if [[ "$ENCORE" = true ]]; then
    echo "
* Installing Symfony Encore with Composer
  (running composer require encore)
    "
    composer require encore

    # check if yarn is executable, otherwise use npm
    if hash yarn 2>/dev/null; then
        yarn
    else
        npm install
    fi
fi

echo -e "\n.idea" >> .gitignore

echo "
* Adding the project files to Git and committing with message: ${green}$MESSAGE${reset}
"

git add .
git commit -m "$MESSAGE"

# Start server in the background
symfony server:start -d --no-tls

# Open project in a browser
symfony open:local

case $PROJECTPATH in
 ".") prettyPath="$PROJECTNAME" ;;
 *) prettyPath="$PROJECTPATH/$PROJECTNAME" ;;
esac

### Load after file if it exists
if [[ -f ~/.carrera/after ]]; then
    echo "
${green}Running additional commands...${reset}
    "
    source ~/.carrera/after
fi

if [[ "$CODEEDITOR" != "" ]]; then
    if isterminaleditor; then
       $CODEEDITOR .
   fi
fi

# End script; disable error handling
trap : 0
